// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum RoleStatus {
  ADMIN
  USER
  SELLER
}

model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  username        String
  email           String?         @unique
  emailVerified   DateTime?
  image           String?
  role            RoleStatus      @default(USER)
  hashedPassword  String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  conversationIds String[]        @db.ObjectId
  conversations   Conversations[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]        @db.ObjectId
  seenMessages   Message[]       @relation("Seen", fields: [seenMessageIds], references: [id])
  ratings        Int?
  messages       Message[]
  menu           Menu[]
  cart           Cart[]
  payment        Payment[]       @relation("SellerPayments")
  paymentsMade   Payment[]       @relation("UserPayments")
  reviews        Review[]        @relation("SellerReviews")
  reviewsMade    Review[]        @relation("UserReview")
  notifications  Notifications[]
}

model Menu {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  price             Int
  category          String?
  image             String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  availabilityCount Int
  servedCount       Int?     @default(0)
  userid            String   @db.ObjectId
  user              User?    @relation(fields: [userid], references: [id], onDelete: Cascade)
  cart              Cart[]
  Review            Review[]
}

model Review {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  review      Int
  description String
  menuid      String @db.ObjectId
  menu        Menu?  @relation(fields: [menuid], references: [id], onDelete: Cascade)
  userid      String @db.ObjectId // Customer ID
  sellerId    String @db.ObjectId // Seller ID
  user        User   @relation("UserReview", fields: [userid], references: [id])
  seller      User   @relation("SellerReviews", fields: [sellerId], references: [id])
}

model Cart {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  totalPrice Int?
  totalCount Int?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  menuid     String            @db.ObjectId
  userid     String            @db.ObjectId
  status     ReservationStatus @default(PENDING)
  menu       Menu?             @relation(fields: [menuid], references: [id], onDelete: Cascade)
  user       User?             @relation(fields: [userid], references: [id], onDelete: Cascade)
}

model Payment {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  amount         Int?
  salesamount         Int?
  currency       String
  paymentGroupId String?
  status         PaymentStatus @default(PENDING)
  userid         String        @db.ObjectId // Customer ID
  sellerId       String        @db.ObjectId // Seller ID
  user           User          @relation("UserPayments", fields: [userid], references: [id])
  seller         User          @relation("SellerPayments", fields: [sellerId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  cartItems      Json?
}

model Notifications {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  action    String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userid String @db.ObjectId
  user   User?  @relation(fields: [userid], references: [id], onDelete: Cascade)
}

model Conversations {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  lastMessage   String?
  isGroup       Boolean?

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String?        @db.ObjectId
  conversation   Conversations? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
